/*
 * This file is generated by jOOQ.
 */
package example.social.domain.user.infrastructure.data.schema.tables.daos;


import example.social.domain.user.infrastructure.data.schema.tables.UserPassword;
import example.social.domain.user.infrastructure.data.schema.tables.records.UserPasswordRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPasswordDao extends DAOImpl<UserPasswordRecord, example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword, Long> {

    /**
     * Create a new UserPasswordDao without any configuration
     */
    public UserPasswordDao() {
        super(UserPassword.USER_PASSWORD, example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword.class);
    }

    /**
     * Create a new UserPasswordDao with an attached configuration
     */
    public UserPasswordDao(Configuration configuration) {
        super(UserPassword.USER_PASSWORD, example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword.class, configuration);
    }

    @Override
    public Long getId(example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserPassword.USER_PASSWORD.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword> fetchByUserId(Long... values) {
        return fetch(UserPassword.USER_PASSWORD.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword fetchOneByUserId(Long value) {
        return fetchOne(UserPassword.USER_PASSWORD.USER_ID, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPassword.USER_PASSWORD.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.UserPassword> fetchByPassword(String... values) {
        return fetch(UserPassword.USER_PASSWORD.PASSWORD, values);
    }
}
