/*
 * This file is generated by jOOQ.
 */
package example.social.domain.user.infrastructure.data.schema.tables.daos;


import example.social.domain.user.infrastructure.data.schema.tables.User;
import example.social.domain.user.infrastructure.data.schema.tables.records.UserRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, example.social.domain.user.infrastructure.data.schema.tables.pojos.User, Long> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, example.social.domain.user.infrastructure.data.schema.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, example.social.domain.user.infrastructure.data.schema.tables.pojos.User.class, configuration);
    }

    @Override
    public Long getId(example.social.domain.user.infrastructure.data.schema.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchById(Long... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public example.social.domain.user.infrastructure.data.schema.tables.pojos.User fetchOneById(Long value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>account BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchRangeOfAccount(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.ACCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchByAccount(String... values) {
        return fetch(User.USER.ACCOUNT, values);
    }

    /**
     * Fetch a unique record that has <code>account = value</code>
     */
    public example.social.domain.user.infrastructure.data.schema.tables.pojos.User fetchOneByAccount(String value) {
        return fetchOne(User.USER.ACCOUNT, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchRangeOfCreatedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchByCreatedAt(Long... values) {
        return fetch(User.USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchRangeOfUpdatedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(User.USER.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<example.social.domain.user.infrastructure.data.schema.tables.pojos.User> fetchByUpdatedAt(Long... values) {
        return fetch(User.USER.UPDATED_AT, values);
    }
}
