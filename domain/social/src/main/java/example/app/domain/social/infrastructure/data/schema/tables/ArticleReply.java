/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables;


import example.app.domain.social.infrastructure.data.schema.Keys;
import example.app.domain.social.infrastructure.data.schema.Test;
import example.app.domain.social.infrastructure.data.schema.tables.records.ArticleReplyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleReply extends TableImpl<ArticleReplyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.article_reply</code>
     */
    public static final ArticleReply ARTICLE_REPLY = new ArticleReply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleReplyRecord> getRecordType() {
        return ArticleReplyRecord.class;
    }

    /**
     * The column <code>test.article_reply.id</code>. id
     */
    public final TableField<ArticleReplyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>test.article_reply.article_id</code>. the article id which this reply replied to
     */
    public final TableField<ArticleReplyRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT.nullable(false), this, "the article id which this reply replied to");

    /**
     * The column <code>test.article_reply.content</code>. the replied content
     */
    public final TableField<ArticleReplyRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "the replied content");

    /**
     * The column <code>test.article_reply.replied_by</code>. the poster id who replied the article
     */
    public final TableField<ArticleReplyRecord, Long> REPLIED_BY = createField(DSL.name("replied_by"), SQLDataType.BIGINT.nullable(false), this, "the poster id who replied the article");

    /**
     * The column <code>test.article_reply.replied_at</code>. the replied time
     */
    public final TableField<ArticleReplyRecord, Long> REPLIED_AT = createField(DSL.name("replied_at"), SQLDataType.BIGINT.nullable(false), this, "the replied time");

    private ArticleReply(Name alias, Table<ArticleReplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleReply(Name alias, Table<ArticleReplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.article_reply</code> table reference
     */
    public ArticleReply(String alias) {
        this(DSL.name(alias), ARTICLE_REPLY);
    }

    /**
     * Create an aliased <code>test.article_reply</code> table reference
     */
    public ArticleReply(Name alias) {
        this(alias, ARTICLE_REPLY);
    }

    /**
     * Create a <code>test.article_reply</code> table reference
     */
    public ArticleReply() {
        this(DSL.name("article_reply"), null);
    }

    public <O extends Record> ArticleReply(Table<O> child, ForeignKey<O, ArticleReplyRecord> key) {
        super(child, key, ARTICLE_REPLY);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public Identity<ArticleReplyRecord, Long> getIdentity() {
        return (Identity<ArticleReplyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleReplyRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_REPLY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ArticleReplyRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleReplyRecord>>asList(Keys.KEY_ARTICLE_REPLY_PRIMARY);
    }

    @Override
    public List<ForeignKey<ArticleReplyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArticleReplyRecord, ?>>asList(Keys.ARTICLE_REPLY_FK, Keys.ARTICLE_REPLY_FK_1);
    }

    private transient Article _article;
    private transient Poster _poster;

    public Article article() {
        if (_article == null)
            _article = new Article(this, Keys.ARTICLE_REPLY_FK);

        return _article;
    }

    public Poster poster() {
        if (_poster == null)
            _poster = new Poster(this, Keys.ARTICLE_REPLY_FK_1);

        return _poster;
    }

    @Override
    public ArticleReply as(String alias) {
        return new ArticleReply(DSL.name(alias), this);
    }

    @Override
    public ArticleReply as(Name alias) {
        return new ArticleReply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleReply rename(String name) {
        return new ArticleReply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleReply rename(Name name) {
        return new ArticleReply(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
