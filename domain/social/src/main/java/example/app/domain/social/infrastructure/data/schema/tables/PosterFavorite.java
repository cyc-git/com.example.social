/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables;


import example.app.domain.social.infrastructure.data.schema.Keys;
import example.app.domain.social.infrastructure.data.schema.Test;
import example.app.domain.social.infrastructure.data.schema.tables.records.PosterFavoriteRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PosterFavorite extends TableImpl<PosterFavoriteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.poster_favorite</code>
     */
    public static final PosterFavorite POSTER_FAVORITE = new PosterFavorite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PosterFavoriteRecord> getRecordType() {
        return PosterFavoriteRecord.class;
    }

    /**
     * The column <code>test.poster_favorite.poster_id</code>. the poster id
     */
    public final TableField<PosterFavoriteRecord, Long> POSTER_ID = createField(DSL.name("poster_id"), SQLDataType.BIGINT.nullable(false), this, "the poster id");

    /**
     * The column <code>test.poster_favorite.article_id</code>. the favorited article id
     */
    public final TableField<PosterFavoriteRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT.nullable(false), this, "the favorited article id");

    /**
     * The column <code>test.poster_favorite.favorited_at</code>. the favorited time
     */
    public final TableField<PosterFavoriteRecord, Long> FAVORITED_AT = createField(DSL.name("favorited_at"), SQLDataType.BIGINT.nullable(false), this, "the favorited time");

    private PosterFavorite(Name alias, Table<PosterFavoriteRecord> aliased) {
        this(alias, aliased, null);
    }

    private PosterFavorite(Name alias, Table<PosterFavoriteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.poster_favorite</code> table reference
     */
    public PosterFavorite(String alias) {
        this(DSL.name(alias), POSTER_FAVORITE);
    }

    /**
     * Create an aliased <code>test.poster_favorite</code> table reference
     */
    public PosterFavorite(Name alias) {
        this(alias, POSTER_FAVORITE);
    }

    /**
     * Create a <code>test.poster_favorite</code> table reference
     */
    public PosterFavorite() {
        this(DSL.name("poster_favorite"), null);
    }

    public <O extends Record> PosterFavorite(Table<O> child, ForeignKey<O, PosterFavoriteRecord> key) {
        super(child, key, POSTER_FAVORITE);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public UniqueKey<PosterFavoriteRecord> getPrimaryKey() {
        return Keys.KEY_POSTER_FAVORITE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PosterFavoriteRecord>> getKeys() {
        return Arrays.<UniqueKey<PosterFavoriteRecord>>asList(Keys.KEY_POSTER_FAVORITE_PRIMARY);
    }

    @Override
    public List<ForeignKey<PosterFavoriteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PosterFavoriteRecord, ?>>asList(Keys.POSTER_FAVORITE_FK, Keys.POSTER_FAVORITE_FK_1);
    }

    private transient Poster _poster;
    private transient Article _article;

    public Poster poster() {
        if (_poster == null)
            _poster = new Poster(this, Keys.POSTER_FAVORITE_FK);

        return _poster;
    }

    public Article article() {
        if (_article == null)
            _article = new Article(this, Keys.POSTER_FAVORITE_FK_1);

        return _article;
    }

    @Override
    public PosterFavorite as(String alias) {
        return new PosterFavorite(DSL.name(alias), this);
    }

    @Override
    public PosterFavorite as(Name alias) {
        return new PosterFavorite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PosterFavorite rename(String name) {
        return new PosterFavorite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PosterFavorite rename(Name name) {
        return new PosterFavorite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
