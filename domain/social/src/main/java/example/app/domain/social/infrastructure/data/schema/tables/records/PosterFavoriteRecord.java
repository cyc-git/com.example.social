/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables.records;


import example.app.domain.social.infrastructure.data.schema.tables.PosterFavorite;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PosterFavoriteRecord extends UpdatableRecordImpl<PosterFavoriteRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>test.poster_favorite.poster_id</code>. the poster id
     */
    public void setPosterId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.poster_favorite.poster_id</code>. the poster id
     */
    public Long getPosterId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>test.poster_favorite.article_id</code>. the favorited article id
     */
    public void setArticleId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.poster_favorite.article_id</code>. the favorited article id
     */
    public Long getArticleId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>test.poster_favorite.favorited_at</code>. the favorited time
     */
    public void setFavoritedAt(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>test.poster_favorite.favorited_at</code>. the favorited time
     */
    public Long getFavoritedAt() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PosterFavorite.POSTER_FAVORITE.POSTER_ID;
    }

    @Override
    public Field<Long> field2() {
        return PosterFavorite.POSTER_FAVORITE.ARTICLE_ID;
    }

    @Override
    public Field<Long> field3() {
        return PosterFavorite.POSTER_FAVORITE.FAVORITED_AT;
    }

    @Override
    public Long component1() {
        return getPosterId();
    }

    @Override
    public Long component2() {
        return getArticleId();
    }

    @Override
    public Long component3() {
        return getFavoritedAt();
    }

    @Override
    public Long value1() {
        return getPosterId();
    }

    @Override
    public Long value2() {
        return getArticleId();
    }

    @Override
    public Long value3() {
        return getFavoritedAt();
    }

    @Override
    public PosterFavoriteRecord value1(Long value) {
        setPosterId(value);
        return this;
    }

    @Override
    public PosterFavoriteRecord value2(Long value) {
        setArticleId(value);
        return this;
    }

    @Override
    public PosterFavoriteRecord value3(Long value) {
        setFavoritedAt(value);
        return this;
    }

    @Override
    public PosterFavoriteRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PosterFavoriteRecord
     */
    public PosterFavoriteRecord() {
        super(PosterFavorite.POSTER_FAVORITE);
    }

    /**
     * Create a detached, initialised PosterFavoriteRecord
     */
    public PosterFavoriteRecord(Long posterId, Long articleId, Long favoritedAt) {
        super(PosterFavorite.POSTER_FAVORITE);

        setPosterId(posterId);
        setArticleId(articleId);
        setFavoritedAt(favoritedAt);
    }
}
