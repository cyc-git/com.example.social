/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables.daos;


import example.app.domain.social.infrastructure.data.schema.tables.Poster;
import example.app.domain.social.infrastructure.data.schema.tables.records.PosterRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PosterDao extends DAOImpl<PosterRecord, example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster, Long> {

    /**
     * Create a new PosterDao without any configuration
     */
    public PosterDao() {
        super(Poster.POSTER, example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster.class);
    }

    /**
     * Create a new PosterDao with an attached configuration
     */
    public PosterDao(Configuration configuration) {
        super(Poster.POSTER, example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster.class, configuration);
    }

    @Override
    public Long getId(example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Poster.POSTER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchById(Long... values) {
        return fetch(Poster.POSTER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster fetchOneById(Long value) {
        return fetchOne(Poster.POSTER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Poster.POSTER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchByName(String... values) {
        return fetch(Poster.POSTER.NAME, values);
    }

    /**
     * Fetch records that have <code>account BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchRangeOfAccount(String lowerInclusive, String upperInclusive) {
        return fetchRange(Poster.POSTER.ACCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchByAccount(String... values) {
        return fetch(Poster.POSTER.ACCOUNT, values);
    }

    /**
     * Fetch a unique record that has <code>account = value</code>
     */
    public example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster fetchOneByAccount(String value) {
        return fetchOne(Poster.POSTER.ACCOUNT, value);
    }

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchRangeOfDeletedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Poster.POSTER.DELETED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Poster> fetchByDeletedAt(Long... values) {
        return fetch(Poster.POSTER.DELETED_AT, values);
    }
}
