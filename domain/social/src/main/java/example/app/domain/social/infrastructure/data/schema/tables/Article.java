/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables;


import example.app.domain.social.infrastructure.data.schema.Keys;
import example.app.domain.social.infrastructure.data.schema.Test;
import example.app.domain.social.infrastructure.data.schema.tables.records.ArticleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>test.article.id</code>. id
     */
    public final TableField<ArticleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "id");

    /**
     * The column <code>test.article.poster_id</code>. the poster id who posted this article
     */
    public final TableField<ArticleRecord, Long> POSTER_ID = createField(DSL.name("poster_id"), SQLDataType.BIGINT.nullable(false), this, "the poster id who posted this article");

    /**
     * The column <code>test.article.content</code>. the posted content
     */
    public final TableField<ArticleRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "the posted content");

    /**
     * The column <code>test.article.posted_at</code>. the posted time
     */
    public final TableField<ArticleRecord, Long> POSTED_AT = createField(DSL.name("posted_at"), SQLDataType.BIGINT.nullable(false), this, "the posted time");

    /**
     * The column <code>test.article.updated_at</code>. the last update time
     */
    public final TableField<ArticleRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.BIGINT.nullable(false), this, "the last update time");

    /**
     * The column <code>test.article.sharing_article_id</code>. the article id shared by this article, may be null, means this article did not share any article
     */
    public final TableField<ArticleRecord, Long> SHARING_ARTICLE_ID = createField(DSL.name("sharing_article_id"), SQLDataType.BIGINT, this, "the article id shared by this article, may be null, means this article did not share any article");

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>test.article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    /**
     * Create a <code>test.article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
        super(child, key, ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public Identity<ArticleRecord, Long> getIdentity() {
        return (Identity<ArticleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleRecord>>asList(Keys.KEY_ARTICLE_PRIMARY);
    }

    @Override
    public List<ForeignKey<ArticleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArticleRecord, ?>>asList(Keys.ARTICLE_FK, Keys.ARTICLE_FK_1);
    }

    private transient Poster _poster;
    private transient Article _article;

    public Poster poster() {
        if (_poster == null)
            _poster = new Poster(this, Keys.ARTICLE_FK);

        return _poster;
    }

    public Article article() {
        if (_article == null)
            _article = new Article(this, Keys.ARTICLE_FK_1);

        return _article;
    }

    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Long, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
