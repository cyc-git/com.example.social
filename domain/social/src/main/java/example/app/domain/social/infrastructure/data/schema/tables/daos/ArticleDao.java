/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables.daos;


import example.app.domain.social.infrastructure.data.schema.tables.Article;
import example.app.domain.social.infrastructure.data.schema.tables.records.ArticleRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleDao extends DAOImpl<ArticleRecord, example.app.domain.social.infrastructure.data.schema.tables.pojos.Article, Long> {

    /**
     * Create a new ArticleDao without any configuration
     */
    public ArticleDao() {
        super(Article.ARTICLE, example.app.domain.social.infrastructure.data.schema.tables.pojos.Article.class);
    }

    /**
     * Create a new ArticleDao with an attached configuration
     */
    public ArticleDao(Configuration configuration) {
        super(Article.ARTICLE, example.app.domain.social.infrastructure.data.schema.tables.pojos.Article.class, configuration);
    }

    @Override
    public Long getId(example.app.domain.social.infrastructure.data.schema.tables.pojos.Article object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Article.ARTICLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchById(Long... values) {
        return fetch(Article.ARTICLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public example.app.domain.social.infrastructure.data.schema.tables.pojos.Article fetchOneById(Long value) {
        return fetchOne(Article.ARTICLE.ID, value);
    }

    /**
     * Fetch records that have <code>poster_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfPosterId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Article.ARTICLE.POSTER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>poster_id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchByPosterId(Long... values) {
        return fetch(Article.ARTICLE.POSTER_ID, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Article.ARTICLE.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchByContent(String... values) {
        return fetch(Article.ARTICLE.CONTENT, values);
    }

    /**
     * Fetch records that have <code>posted_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfPostedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Article.ARTICLE.POSTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>posted_at IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchByPostedAt(Long... values) {
        return fetch(Article.ARTICLE.POSTED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfUpdatedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Article.ARTICLE.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchByUpdatedAt(Long... values) {
        return fetch(Article.ARTICLE.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>sharing_article_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchRangeOfSharingArticleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Article.ARTICLE.SHARING_ARTICLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sharing_article_id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.Article> fetchBySharingArticleId(Long... values) {
        return fetch(Article.ARTICLE.SHARING_ARTICLE_ID, values);
    }
}
