/*
 * This file is generated by jOOQ.
 */
package example.app.domain.social.infrastructure.data.schema.tables.daos;


import example.app.domain.social.infrastructure.data.schema.tables.ArticleReply;
import example.app.domain.social.infrastructure.data.schema.tables.records.ArticleReplyRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleReplyDao extends DAOImpl<ArticleReplyRecord, example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply, Long> {

    /**
     * Create a new ArticleReplyDao without any configuration
     */
    public ArticleReplyDao() {
        super(ArticleReply.ARTICLE_REPLY, example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply.class);
    }

    /**
     * Create a new ArticleReplyDao with an attached configuration
     */
    public ArticleReplyDao(Configuration configuration) {
        super(ArticleReply.ARTICLE_REPLY, example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply.class, configuration);
    }

    @Override
    public Long getId(example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ArticleReply.ARTICLE_REPLY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchById(Long... values) {
        return fetch(ArticleReply.ARTICLE_REPLY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply fetchOneById(Long value) {
        return fetchOne(ArticleReply.ARTICLE_REPLY.ID, value);
    }

    /**
     * Fetch records that have <code>article_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchRangeOfArticleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ArticleReply.ARTICLE_REPLY.ARTICLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>article_id IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchByArticleId(Long... values) {
        return fetch(ArticleReply.ARTICLE_REPLY.ARTICLE_ID, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(ArticleReply.ARTICLE_REPLY.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchByContent(String... values) {
        return fetch(ArticleReply.ARTICLE_REPLY.CONTENT, values);
    }

    /**
     * Fetch records that have <code>replied_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchRangeOfRepliedBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ArticleReply.ARTICLE_REPLY.REPLIED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>replied_by IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchByRepliedBy(Long... values) {
        return fetch(ArticleReply.ARTICLE_REPLY.REPLIED_BY, values);
    }

    /**
     * Fetch records that have <code>replied_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchRangeOfRepliedAt(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ArticleReply.ARTICLE_REPLY.REPLIED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>replied_at IN (values)</code>
     */
    public List<example.app.domain.social.infrastructure.data.schema.tables.pojos.ArticleReply> fetchByRepliedAt(Long... values) {
        return fetch(ArticleReply.ARTICLE_REPLY.REPLIED_AT, values);
    }
}
